<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-logging</artifactId>
</dependency>



logging.level.org.springframework=INFO
logging.level.com.example=DEBUG


package com.example.ecalendar.service;

import com.example.ecalendar.model.Employee;
import com.example.ecalendar.repository.EmployeeRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
public class EmployeeServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(EmployeeServiceTest.class);

    @InjectMocks
    private EmployeeService employeeService;

    @Mock
    private EmployeeRepository employeeRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllEmployees() {
        logger.info("Starting test for getAllEmployees");

        Employee emp1 = new Employee();
        emp1.setId(1L);
        emp1.setName("Mehul");
        emp1.setPosition("Developer");
        emp1.setDepartment("IT");

        Employee emp2 = new Employee();
        emp2.setId(2L);
        emp2.setName("John");
        emp2.setPosition("Manager");
        emp2.setDepartment("Sales");

        List<Employee> employeeList = Arrays.asList(emp1, emp2);
        when(employeeRepository.findAll()).thenReturn(employeeList);

        List<Employee> result = employeeService.getAllEmployees();

        assertEquals(2, result.size());
        verify(employeeRepository, times(1)).findAll();

        logger.info("Completed test for getAllEmployees");
    }

    // Add more tests for other methods
}




package com.example.ecalendar.service;

import com.example.ecalendar.model.Employee;
import com.example.ecalendar.repository.EmployeeRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
public class EmployeeServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(EmployeeServiceTest.class);

    @InjectMocks
    private EmployeeService employeeService;

    @Mock
    private EmployeeRepository employeeRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllEmployees() {
        logger.info("Starting test for getAllEmployees");

        // Mocking data
        Employee emp1 = new Employee();
        emp1.setId(1L);
        emp1.setName("Mehul");
        emp1.setPosition("Developer");
        emp1.setDepartment("IT");

        Employee emp2 = new Employee();
        emp2.setId(2L);
        emp2.setName("John");
        emp2.setPosition("Manager");
        emp2.setDepartment("Sales");

        List<Employee> employeeList = Arrays.asList(emp1, emp2);
        when(employeeRepository.findAll()).thenReturn(employeeList);

        // Test case: Pass - Check size of list
        List<Employee> result = employeeService.getAllEmployees();
        assertEquals(2, result.size());
        verify(employeeRepository, times(1)).findAll();

        // Test case: Fail - Incorrect size assertion
        assertNotEquals(3, result.size(), "Expected size is not equal to actual size");

        logger.info("Completed test for getAllEmployees");
    }

    @Test
    public void testGetEmployeeById() {
        logger.info("Starting test for getEmployeeById");

        Long employeeId = 1L;
        Employee emp = new Employee();
        emp.setId(employeeId);
        emp.setName("Mehul");
        emp.setPosition("Developer");
        emp.setDepartment("IT");

        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(emp));

        // Test case: Pass - Check correct employee details
        Employee result = employeeService.getEmployeeById(employeeId);
        assertEquals(employeeId, result.getId());
        assertEquals("Mehul", result.getName());
        assertEquals("Developer", result.getPosition());
        assertEquals("IT", result.getDepartment());
        verify(employeeRepository, times(1)).findById(employeeId);

        // Test case: Fail - Incorrect department assertion
        assertEquals("HR", result.getDepartment(), "Expected department is not equal to actual department");

        logger.info("Completed test for getEmployeeById");
    }

    @Test
    public void testSaveEmployee() {
        logger.info("Starting test for saveEmployee");

        Employee empToSave = new Employee();
        empToSave.setName("Alice");
        empToSave.setPosition("Engineer");
        empToSave.setDepartment("Engineering");

        when(employeeRepository.save(empToSave)).thenReturn(empToSave);

        // Test case: Pass - Check saved employee details
        Employee savedEmployee = employeeService.saveEmployee(empToSave);
        assertEquals("Alice", savedEmployee.getName());
        assertEquals("Engineer", savedEmployee.getPosition());
        assertEquals("Engineering", savedEmployee.getDepartment());
        verify(employeeRepository, times(1)).save(empToSave);

        // Test case: Fail - Missing position assertion
        assertNull(savedEmployee.getPosition(), "Expected position should be null");

        logger.info("Completed test for saveEmployee");
    }

    @Test
    public void testUpdateEmployee() {
        logger.info("Starting test for updateEmployee");

        Long employeeId = 1L;
        Employee existingEmployee = new Employee();
        existingEmployee.setId(employeeId);
        existingEmployee.setName("John");
        existingEmployee.setPosition("Manager");
        existingEmployee.setDepartment("Sales");

        Employee updatedEmployeeData = new Employee();
        updatedEmployeeData.setName("John Doe");

        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(existingEmployee));
        when(employeeRepository.save(existingEmployee)).thenReturn(existingEmployee);

        // Test case: Pass - Check updated employee details
        Employee updatedEmployee = employeeService.updateEmployee(employeeId, updatedEmployeeData);
        assertEquals("John Doe", updatedEmployee.getName());
        assertEquals("Manager", updatedEmployee.getPosition()); // Position should not change
        assertEquals("Sales", updatedEmployee.getDepartment()); // Department should not change
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, times(1)).save(existingEmployee);

        // Test case: Fail - Incorrect name assertion
        assertEquals("Jane Doe", updatedEmployee.getName(), "Expected name is not equal to actual name");

        logger.info("Completed test for updateEmployee");
    }

    @Test
    public void testDeleteEmployee() {
        logger.info("Starting test for deleteEmployee");

        Long employeeId = 1L;
        Employee existingEmployee = new Employee();
        existingEmployee.setId(employeeId);
        existingEmployee.setName("Jane");
        existingEmployee.setPosition("HR");
        existingEmployee.setDepartment("Human Resources");

        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(existingEmployee));

        // Test case: Pass - Check deletion of employee
        employeeService.deleteEmployee(employeeId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, times(1)).deleteById(employeeId);

        // Test case: Fail - Verify non-existence after deletion
        assertNull(employeeService.getEmployeeById(employeeId), "Employee still exists after deletion");

        logger.info("Completed test for deleteEmployee");
    }
}



package com.example.ecalendar.service;

import com.example.ecalendar.model.Employee;
import com.example.ecalendar.repository.EmployeeRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
public class EmployeeServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(EmployeeServiceTest.class);

    @InjectMocks
    private EmployeeService employeeService;

    @Mock
    private EmployeeRepository employeeRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllEmployees() {
        logger.info("Starting test for getAllEmployees");

        // Mocking data
        Employee emp1 = new Employee();
        emp1.setId(1L);
        emp1.setName("Mehul");
        emp1.setPosition("Developer");
        emp1.setDepartment("IT");

        Employee emp2 = new Employee();
        emp2.setId(2L);
        emp2.setName("John");
        emp2.setPosition("Manager");
        emp2.setDepartment("Sales");

        List<Employee> employeeList = Arrays.asList(emp1, emp2);
        when(employeeRepository.findAll()).thenReturn(employeeList);

        // Test case: Pass - Check size of list
        List<Employee> result = employeeService.getAllEmployees();
        assertEquals(2, result.size());
        verify(employeeRepository, times(1)).findAll();

        // Test case: Fail - Incorrect size assertion
        assertNotEquals(3, result.size(), "Expected size is not equal to actual size");

        logger.info("Completed test for getAllEmployees");
    }

    @Test
    public void testGetEmployeeById() {
        logger.info("Starting test for getEmployeeById");

        Long employeeId = 1L;
        Employee emp = new Employee();
        emp.setId(employeeId);
        emp.setName("Mehul");
        emp.setPosition("Developer");
        emp.setDepartment("IT");

        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(emp));

        // Test case: Pass - Check correct employee details
        Employee result = employeeService.getEmployeeById(employeeId);
        assertEquals(employeeId, result.getId());
        assertEquals("Mehul", result.getName());
        assertEquals("Developer", result.getPosition());
        assertEquals("IT", result.getDepartment());
        verify(employeeRepository, times(1)).findById(employeeId);

        // Test case: Fail - Incorrect department assertion
        assertEquals("HR", result.getDepartment(), "Expected department is not equal to actual department");

        logger.info("Completed test for getEmployeeById");
    }

    @Test
    public void testSaveEmployee() {
        logger.info("Starting test for saveEmployee");

        Employee empToSave = new Employee();
        empToSave.setName("Alice");
        empToSave.setPosition("Engineer");
        empToSave.setDepartment("Engineering");

        when(employeeRepository.save(empToSave)).thenReturn(empToSave);

        // Test case: Pass - Check saved employee details
        Employee savedEmployee = employeeService.saveEmployee(empToSave);
        assertEquals("Alice", savedEmployee.getName());
        assertEquals("Engineer", savedEmployee.getPosition());
        assertEquals("Engineering", savedEmployee.getDepartment());
        verify(employeeRepository, times(1)).save(empToSave);

        // Test case: Fail - Missing position assertion
        assertNull(savedEmployee.getPosition(), "Expected position should be null");

        logger.info("Completed test for saveEmployee");
    }

    @Test
    public void testUpdateEmployee() {
        logger.info("Starting test for updateEmployee");

        Long employeeId = 1L;
        Employee existingEmployee = new Employee();
        existingEmployee.setId(employeeId);
        existingEmployee.setName("John");
        existingEmployee.setPosition("Manager");
        existingEmployee.setDepartment("Sales");

        Employee updatedEmployeeData = new Employee();
        updatedEmployeeData.setName("John Doe");

        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(existingEmployee));
        when(employeeRepository.save(existingEmployee)).thenReturn(existingEmployee);

        // Test case: Pass - Check updated employee details
        Employee updatedEmployee = employeeService.updateEmployee(employeeId, updatedEmployeeData);
        assertEquals("John Doe", updatedEmployee.getName());
        assertEquals("Manager", updatedEmployee.getPosition()); // Position should not change
        assertEquals("Sales", updatedEmployee.getDepartment()); // Department should not change
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, times(1)).save(existingEmployee);

        // Test case: Fail - Incorrect name assertion
        assertEquals("Jane Doe", updatedEmployee.getName(), "Expected name is not equal to actual name");

        logger.info("Completed test for updateEmployee");
    }

    @Test
    public void testDeleteEmployee() {
        logger.info("Starting test for deleteEmployee");

        Long employeeId = 1L;
        Employee existingEmployee = new Employee();
        existingEmployee.setId(employeeId);
        existingEmployee.setName("Jane");
        existingEmployee.setPosition("HR");
        existingEmployee.setDepartment("Human Resources");

        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(existingEmployee));

        // Test case: Pass - Check deletion of employee
        employeeService.deleteEmployee(employeeId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, times(1)).deleteById(employeeId);

        // Test case: Fail - Verify non-existence after deletion
        assertNull(employeeService.getEmployeeById(employeeId), "Employee still exists after deletion");

        logger.info("Completed test for deleteEmployee");
    }
}



package com.example.ecalendar.service;

import com.example.ecalendar.model.CalendarEvent;
import com.example.ecalendar.repository.CalendarEventRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalendarEventServiceTest {

    @Mock
    private CalendarEventRepository calendarEventRepository;

    @InjectMocks
    private CalendarEventService calendarEventService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllCalendarEvents() {
        calendarEventService.getAllCalendarEvents();
        verify(calendarEventRepository, times(1)).findAll();
    }

    @Test
    public void testGetCalendarEventById_Success() {
        CalendarEvent event = new CalendarEvent();
        event.setId(1L);
        when(calendarEventRepository.findById(1L)).thenReturn(Optional.of(event));
        CalendarEvent foundEvent = calendarEventService.getCalendarEventById(1L);
        assertNotNull(foundEvent);
        assertEquals(1L, foundEvent.getId());
    }

    @Test
    public void testGetCalendarEventById_Fail() {
        when(calendarEventRepository.findById(1L)).thenReturn(Optional.empty());
        CalendarEvent foundEvent = calendarEventService.getCalendarEventById(1L);
        assertNull(foundEvent);
    }

    @Test
    public void testAddCalendarEvent() {
        CalendarEvent event = new CalendarEvent();
        event.setTitle("Meeting");
        event.setDate(LocalDate.now());
        event.setType("Work");
        when(calendarEventRepository.save(event)).thenReturn(event);
        CalendarEvent savedEvent = calendarEventService.addCalendarEvent(event);
        assertNotNull(savedEvent);
        assertEquals("Meeting", savedEvent.getTitle());
    }

    @Test
    public void testUpdateCalendarEvent_Success() {
        CalendarEvent event = new CalendarEvent();
        event.setId(1L);
        event.setTitle("Old Title");
        when(calendarEventRepository.findById(1L)).thenReturn(Optional.of(event));

        CalendarEvent updatedEvent = new CalendarEvent();
        updatedEvent.setTitle("New Title");

        CalendarEvent result = calendarEventService.updateCalendarEvent(1L, updatedEvent);
        assertNotNull(result);
        assertEquals("New Title", result.getTitle());
    }

    @Test
    public void testUpdateCalendarEvent_Fail() {
        when(calendarEventRepository.findById(1L)).thenReturn(Optional.empty());
        CalendarEvent updatedEvent = new CalendarEvent();
        updatedEvent.setTitle("New Title");
        CalendarEvent result = calendarEventService.updateCalendarEvent(1L, updatedEvent);
        assertNull(result);
    }

    @Test
    public void testDeleteCalendarEvent() {
        CalendarEvent event = new CalendarEvent();
        event.setId(1L);
        when(calendarEventRepository.findById(1L)).thenReturn(Optional.of(event));
        calendarEventService.deleteCalendarEvent(1L);
        verify(calendarEventRepository, times(1)).deleteById(1L);
    }
}



package com.example.ecalendar.service;

import com.example.ecalendar.model.OrganizationalEvent;
import com.example.ecalendar.repository.OrganizationalEventRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class OrganizationalEventServiceTest {

    @Mock
    private OrganizationalEventRepository organizationalEventRepository;

    @InjectMocks
    private OrganizationalEventService organizationalEventService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllOrganizationalEvents() {
        organizationalEventService.getAllOrganizationalEvents();
        verify(organizationalEventRepository, times(1)).findAll();
    }

    @Test
    public void testGetOrganizationalEventById_Success() {
        OrganizationalEvent event = new OrganizationalEvent();
        event.setId(1L);
        when(organizationalEventRepository.findById(1L)).thenReturn(Optional.of(event));
        OrganizationalEvent foundEvent = organizationalEventService.getOrganizationalEventById(1L);
        assertNotNull(foundEvent);
        assertEquals(1L, foundEvent.getId());
    }

    @Test
    public void testGetOrganizationalEventById_Fail() {
        when(organizationalEventRepository.findById(1L)).thenReturn(Optional.empty());
        OrganizationalEvent foundEvent = organizationalEventService.getOrganizationalEventById(1L);
        assertNull(foundEvent);
    }

    @Test
    public void testAddOrganizationalEvent() {
        OrganizationalEvent event = new OrganizationalEvent();
        event.setTitle("Conference");
        event.setDate(LocalDate.now());
        when(organizationalEventRepository.save(event)).thenReturn(event);
        OrganizationalEvent savedEvent = organizationalEventService.addOrganizationalEvent(event);
        assertNotNull(savedEvent);
        assertEquals("Conference", savedEvent.getTitle());
    }

    @Test
    public void testUpdateOrganizationalEvent_Success() {
        OrganizationalEvent event = new OrganizationalEvent();
        event.setId(1L);
        event.setTitle("Old Title");
        when(organizationalEventRepository.findById(1L)).thenReturn(Optional.of(event));

        OrganizationalEvent updatedEvent = new OrganizationalEvent();
        updatedEvent.setTitle("New Title");

        OrganizationalEvent result = organizationalEventService.updateOrganizationalEvent(1L, updatedEvent);
        assertNotNull(result);
        assertEquals("New Title", result.getTitle());
    }

    @Test
    public void testUpdateOrganizationalEvent_Fail() {
        when(organizationalEventRepository.findById(1L)).thenReturn(Optional.empty());
        OrganizationalEvent updatedEvent = new OrganizationalEvent();
        updatedEvent.setTitle("New Title");
        OrganizationalEvent result = organizationalEventService.updateOrganizationalEvent(1L, updatedEvent);
        assertNull(result);
    }

    @Test
    public void testDeleteOrganizationalEvent() {
        OrganizationalEvent event = new OrganizationalEvent();
        event.setId(1L);
        when(organizationalEventRepository.findById(1L)).thenReturn(Optional.of(event));
        organizationalEventService.deleteOrganizationalEvent(1L);
        verify(organizationalEventRepository, times(1)).deleteById(1L);
    }
}



package com.example.ecalendar.controller;

import com.example.ecalendar.model.CalendarEvent;
import com.example.ecalendar.model.OrganizationalEvent;
import com.example.ecalendar.service.CalendarEventService;
import com.example.ecalendar.service.OrganizationalEventService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

public class EventControllerTest {

    private MockMvc mockMvc;

    @Mock
    private CalendarEventService calendarEventService;

    @Mock
    private OrganizationalEventService organizationalEventService;

    @InjectMocks
    private EventController eventController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(eventController).build();
    }

    @Test
    public void testGetAllCalendarEvents() throws Exception {
        CalendarEvent event1 = new CalendarEvent(1L, "Meeting", LocalDate.now(), "Work", null);
        CalendarEvent event2 = new CalendarEvent(2L, "Leave", LocalDate.now().plusDays(1), "Leave", null);
        List<CalendarEvent> events = Arrays.asList(event1, event2);

        when(calendarEventService.getAllCalendarEvents()).thenReturn(events);

        mockMvc.perform(get("/api/events/calendar"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].title", is("Meeting")))
                .andExpect(jsonPath("$[1].title", is("Leave")));
    }

    @Test
    public void testCreateCalendarEvent() throws Exception {
        CalendarEvent event = new CalendarEvent(1L, "Meeting", LocalDate.now(), "Work", null);

        when(calendarEventService.addCalendarEvent(any(CalendarEvent.class))).thenReturn(event);

        mockMvc.perform(post("/api/events/calendar")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"title\":\"Meeting\",\"date\":\"2024-07-18\",\"type\":\"Work\",\"employeeId\":1}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title", is("Meeting")));
    }

    @Test
    public void testCreateCalendarEvent_Fail() throws Exception {
        when(calendarEventService.addCalendarEvent(any(CalendarEvent.class))).thenThrow(new RuntimeException("Test Exception"));

        mockMvc.perform(post("/api/events/calendar")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"title\":\"Meeting\",\"date\":\"2024-07-18\",\"type\":\"Work\",\"employeeId\":1}"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    public void testUpdateCalendarEvent_Success() throws Exception {
        CalendarEvent event = new CalendarEvent(1L, "Updated Meeting", LocalDate.now(), "Work", null);

        when(calendarEventService.updateCalendarEvent(eq(1L), any(CalendarEvent.class))).thenReturn(event);

        mockMvc.perform(put("/api/events/calendar/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"title\":\"Updated Meeting\",\"date\":\"2024-07-18\",\"type\":\"Work\",\"employeeId\":1}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title", is("Updated Meeting")));
    }

    @Test
    public void testUpdateCalendarEvent_Fail() throws Exception {
        when(calendarEventService.updateCalendarEvent(eq(1L), any(CalendarEvent.class))).thenReturn(null);

        mockMvc.perform(put("/api/events/calendar/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"title\":\"Updated Meeting\",\"date\":\"2024-07-18\",\"type\":\"Work\",\"employeeId\":1}"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void testDeleteCalendarEvent_Success() throws Exception {
        doNothing().when(calendarEventService).deleteCalendarEvent(1L);

        mockMvc.perform(delete("/api/events/calendar/1"))
                .andExpect(status().isOk());
    }

    @Test
    public void testDeleteCalendarEvent_Fail() throws Exception {
        doThrow(new RuntimeException("Test Exception")).when(calendarEventService).deleteCalendarEvent(1L);

        mockMvc.perform(delete("/api/events/calendar/1"))
                .andExpect(status().isInternalServerError());
    }
}
