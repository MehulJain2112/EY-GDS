package com.example.ecalendar.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class Employee {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String position;
    private String department;

    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CalendarEvent> calendarEvents;

    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<OrganizationalEvent> organizationalEvents;

    // Getters and setters
}


package com.example.ecalendar.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class CalendarEvent {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private LocalDate date;
    private String type; // e.g., "Shift", "Leave"

    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    // Getters and setters
}

package com.example.ecalendar.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class OrganizationalEvent {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private LocalDate date;

    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    // Getters and setters
}


package com.example.ecalendar.controller;

import com.example.ecalendar.model.Employee;
import com.example.ecalendar.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeRepository employeeRepository;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeRepository.save(employee);
    }
}



package com.example.ecalendar.controller;

import com.example.ecalendar.model.CalendarEvent;
import com.example.ecalendar.model.OrganizationalEvent;
import com.example.ecalendar.repository.CalendarEventRepository;
import com.example.ecalendar.repository.OrganizationalEventRepository;
import com.example.ecalendar.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/events")
public class EventController {

    @Autowired
    private CalendarEventRepository calendarEventRepository;

    @Autowired
    private OrganizationalEventRepository organizationalEventRepository;

    @Autowired
    private EmployeeRepository employeeRepository;

    @GetMapping("/calendar")
    public List<CalendarEvent> getAllCalendarEvents() {
        return calendarEventRepository.findAll();
    }

    @PostMapping("/calendar/{employeeId}")
    public CalendarEvent createCalendarEvent(@PathVariable Long employeeId, @RequestBody CalendarEvent event) {
        return employeeRepository.findById(employeeId).map(employee -> {
            event.setEmployee(employee);
            return calendarEventRepository.save(event);
        }).orElseThrow(() -> new RuntimeException("Employee not found"));
    }

    @GetMapping("/organizational")
    public List<OrganizationalEvent> getAllOrganizationalEvents() {
        return organizationalEventRepository.findAll();
    }

    @PostMapping("/organizational/{employeeId}")
    public OrganizationalEvent createOrganizationalEvent(@PathVariable Long employeeId, @RequestBody OrganizationalEvent event) {
        return employeeRepository.findById(employeeId).map(employee -> {
            event.setEmployee(employee);
            return organizationalEventRepository.save(event);
        }).orElseThrow(() -> new RuntimeException("Employee not found"));
    }
}



<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>E-Calendar System</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>


import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import './App.css';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  return (
    <Router>
      <div className="App">
        <Switch>
          <Route path="/login">
            <Login setIsAuthenticated={setIsAuthenticated} />
          </Route>
          <Route path="/">
            {isAuthenticated ? <Dashboard /> : <Login setIsAuthenticated={setIsAuthenticated} />}
          </Route>
        </Switch>
      </div>
    </Router>
  );
}

export default App;



import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


body {
  font-family: Arial, sans-serif;
}

.App {
  text-align: center;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

h1 {
  color: #333;
}


import React, { useState } from 'react';
import axios from 'axios';

const Login = ({ setIsAuthenticated }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await axios.get('/api/employees', {
        auth: {
          username,
          password
        }
      });
      setIsAuthenticated(true);
    } catch (error) {
      alert('Invalid credentials');
    }
  };

  return (
    <div className="container">
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <div>
          <label>Username:</label>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
        </div>
        <div>
          <label>Password:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;



import React from 'react';
import EmployeeList from './EmployeeList';
import CalendarEvents from './CalendarEvents';
import OrganizationalEvents from './OrganizationalEvents';

const Dashboard = () => {
  return (
    <div className="container">
      <h1>Manager Dashboard</h1>
      <EmployeeList />
      <CalendarEvents />
      <OrganizationalEvents />
    </div>
  );
};

export default Dashboard;


import React, { useEffect, useState } from 'react';
import axios from 'axios';

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);

  useEffect(() => {
    const fetchEmployees = async () => {
      const result = await axios.get('/api/employees');
      setEmployees(result.data);
    };

    fetchEmployees();
  }, []);

  return (
    <div>
      <h2>Employee List</h2>
      <ul>
        {employees.map((employee) => (
          <li key={employee.id}>{employee.name} - {employee.position}</li>
        ))}
      </ul>
    </div>
  );
};

export default EmployeeList;



import React, { useEffect, useState } from 'react';
import axios from 'axios';

const CalendarEvents = () => {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      const result = await axios.get('/api/events/calendar');
      setEvents(result.data);
    };

    fetchEvents();
  }, []);

  return (
    <div>
      <h2>Calendar Events</h2>
      <ul>
        {events.map((event) => (
          <li key={event.id}>{event.date} - {event.title} ({event.type})</li>
        ))}
      </ul>
    </div>
  );
};

export default CalendarEvents;



import React, { useEffect, useState } from 'react';
import axios from 'axios';

const OrganizationalEvents = () => {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      const result = await axios.get('/api/events/organizational');
      setEvents(result.data);
    };

    fetchEvents();
  }, []);

  return (
    <div>
      <h2>Organizational Events</h2>
      <ul>
        {events.map((event) => (
          <li key={event.id}>{event.date} - {event.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default OrganizationalEvents;



import axios from 'axios';

const API_URL = 'http://localhost:8080/api';

export const fetchEmployees = () => axios.get(`${API_URL}/employees`);
export const fetchCalendarEvents = () => axios.get(`${API_URL}/events/calendar`);
export const createCalendarEvent = (employeeId, event) => axios.post(`${API_URL}/events/calendar/${employeeId}`, event);
export const fetchOrganizationalEvents = () => axios.get(`${API_URL}/events/organizational`);
export const createOrganizationalEvent = (employeeId, event) => axios.post(`${API_URL}/events/organizational/${employeeId}`, event);



REACT_APP_API_URL=http://localhost:8080/api


{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "axios": "^0.21.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

------------------------------------------------------
package com.example.ecalendar.service;

import com.example.ecalendar.model.Employee;
import com.example.ecalendar.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Employee getEmployeeById(Long id) {
        return employeeRepository.findById(id).orElse(null);
    }

    public Employee addEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }

    public Employee updateEmployee(Long id, Employee employeeDetails) {
        Employee employee = employeeRepository.findById(id).orElse(null);
        if (employee != null) {
            employee.setName(employeeDetails.getName());
            employee.setPosition(employeeDetails.getPosition());
            employee.setDepartment(employeeDetails.getDepartment());
            employee.setCalendarEvents(employeeDetails.getCalendarEvents());
            employee.setOrganizationalEvents(employeeDetails.getOrganizationalEvents());
            return employeeRepository.save(employee);
        } else {
            return null;
        }
    }
}



package com.example.ecalendar.service;

import com.example.ecalendar.model.CalendarEvent;
import com.example.ecalendar.repository.CalendarEventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CalendarEventService {

    @Autowired
    private CalendarEventRepository calendarEventRepository;

    public List<CalendarEvent> getAllCalendarEvents() {
        return calendarEventRepository.findAll();
    }

    public CalendarEvent getCalendarEventById(Long id) {
        return calendarEventRepository.findById(id).orElse(null);
    }

    public CalendarEvent addCalendarEvent(CalendarEvent calendarEvent) {
        return calendarEventRepository.save(calendarEvent);
    }

    public void deleteCalendarEvent(Long id) {
        calendarEventRepository.deleteById(id);
    }

    public CalendarEvent updateCalendarEvent(Long id, CalendarEvent calendarEventDetails) {
        CalendarEvent calendarEvent = calendarEventRepository.findById(id).orElse(null);
        if (calendarEvent != null) {
            calendarEvent.setTitle(calendarEventDetails.getTitle());
            calendarEvent.setDate(calendarEventDetails.getDate());
            calendarEvent.setType(calendarEventDetails.getType());
            calendarEvent.setEmployee(calendarEventDetails.getEmployee());
            return calendarEventRepository.save(calendarEvent);
        } else {
            return null;
        }
    }
}



package com.example.ecalendar.service;

import com.example.ecalendar.model.OrganizationalEvent;
import com.example.ecalendar.repository.OrganizationalEventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class OrganizationalEventService {

    @Autowired
    private OrganizationalEventRepository organizationalEventRepository;

    public List<OrganizationalEvent> getAllOrganizationalEvents() {
        return organizationalEventRepository.findAll();
    }

    public OrganizationalEvent getOrganizationalEventById(Long id) {
        return organizationalEventRepository.findById(id).orElse(null);
    }

    public OrganizationalEvent addOrganizationalEvent(OrganizationalEvent organizationalEvent) {
        return organizationalEventRepository.save(organizationalEvent);
    }

    public void deleteOrganizationalEvent(Long id) {
        organizationalEventRepository.deleteById(id);
    }

    public OrganizationalEvent updateOrganizationalEvent(Long id, OrganizationalEvent organizationalEventDetails) {
        OrganizationalEvent organizationalEvent = organizationalEventRepository.findById(id).orElse(null);
        if (organizationalEvent != null) {
            organizationalEvent.setTitle(organizationalEventDetails.getTitle());
            organizationalEvent.setDate(organizationalEventDetails.getDate());
            organizationalEvent.setEmployee(organizationalEventDetails.getEmployee());
            return organizationalEventRepository.save(organizationalEvent);
        } else {
            return null;
        }
    }
}



package com.example.ecalendar.controller;

import com.example.ecalendar.model.Employee;
import com.example.ecalendar.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
@CrossOrigin(origins = "http://localhost:3000")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
        Employee employee = employeeService.getEmployeeById(id);
        if (employee != null) {
            return ResponseEntity.ok(employee);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.addEmployee(employee);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {
        Employee updatedEmployee = employeeService.updateEmployee(id, employeeDetails);
        if (updatedEmployee != null) {
            return ResponseEntity.ok(updatedEmployee);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
        Employee employee = employeeService.getEmployeeById(id);
        if (employee != null) {
            employeeService.deleteEmployee(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}



package com.example.ecalendar.controller;

import com.example.ecalendar.model.CalendarEvent;
import com.example.ecalendar.model.OrganizationalEvent;
import com.example.ecalendar.service.CalendarEventService;
import com.example.ecalendar.service.OrganizationalEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/events")
@CrossOrigin(origins = "http://localhost:3000")
public class EventController {

    @Autowired
    private CalendarEventService calendarEventService;

    @Autowired
    private OrganizationalEventService organizationalEventService;

    @GetMapping("/calendar")
    public List<CalendarEvent> getAllCalendarEvents() {
        return calendarEventService.getAllCalendarEvents();
    }

    @GetMapping("/calendar/{id}")
    public ResponseEntity<CalendarEvent> getCalendarEventById(@PathVariable Long id) {
        CalendarEvent calendarEvent = calendarEventService.getCalendarEventById(id);
        if (calendarEvent != null) {
            return ResponseEntity.ok(calendarEvent);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping("/calendar")
    public CalendarEvent createCalendarEvent(@RequestBody CalendarEvent calendarEvent) {
        return calendarEventService.addCalendarEvent(calendarEvent);
    }

    @PutMapping("/calendar/{id}")
    public ResponseEntity<CalendarEvent> updateCalendarEvent(@PathVariable Long id, @RequestBody CalendarEvent calendarEventDetails) {
        CalendarEvent updatedCalendarEvent = calendarEventService.updateCalendarEvent(id, calendarEventDetails);
        if (updatedCalendarEvent != null) {
            return ResponseEntity.ok(updatedCalendarEvent);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/calendar/{id}")
    public ResponseEntity<Void> deleteCalendarEvent(@PathVariable Long id) {
        CalendarEvent calendarEvent = calendarEventService.getCalendarEventById(id);
        if (calendarEvent != null) {
            calendarEventService.deleteCalendarEvent(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/organizational")
    public List<OrganizationalEvent> getAllOrganizationalEvents() {
        return organizationalEventService.getAllOrganizationalEvents();
    }

    @GetMapping("/organizational/{id}")
    public ResponseEntity<OrganizationalEvent> getOrganizationalEventById(@PathVariable Long id) {
        OrganizationalEvent organizationalEvent = organizationalEventService.getOrganizationalEventById(id);
        if (organizationalEvent != null) {
            return ResponseEntity.ok(organizationalEvent);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping("/organizational")
    public OrganizationalEvent createOrganizationalEvent(@RequestBody OrganizationalEvent organizationalEvent) {
        return organizationalEventService.addOrganizationalEvent(organizationalEvent);
    }

    @PutMapping("/organizational/{id}")
    public ResponseEntity<OrganizationalEvent> updateOrganizationalEvent(@PathVariable Long id, @RequestBody OrganizationalEvent organizationalEventDetails) {
        OrganizationalEvent updatedOrganizationalEvent = organizationalEventService.updateOrganizationalEvent(id, organizationalEventDetails);
        if (updatedOrganizationalEvent != null) {
            return ResponseEntity.ok(updatedOrganizationalEvent);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/organizational/{id}")
    public ResponseEntity<Void> deleteOrganizationalEvent(@PathVariable Long id) {
        OrganizationalEvent organizationalEvent = organizationalEventService.getOrganizationalEventById(id);
        if (organizationalEvent != null) {
            organizationalEventService.deleteOrganizationalEvent(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}




